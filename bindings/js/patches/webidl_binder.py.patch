--- webidl_binder.py.orig	Sun Nov 15 20:06:49 2015
+++ webidl_binder.py	Tue Jan  5 03:53:35 2016
@@ -15,2 +15,4 @@
 import WebIDL
+import tempfile
+from subprocess import Popen, PIPE
 
@@ -51,2 +53,3 @@
 enums = {}
+consts = []
 
@@ -75,5 +78,16 @@
 
+mid_js += ['''
+function define(k,v,o) {
+  Object.defineProperty(o || Module, k, { value: v });
+}
+function freeze(o) {
+  return Object.freeze(o);
+}
+''']
+
 def emit_constructor(name):
   global mid_js
-  mid_js += [r'''%s.prototype = %s;
+  global consts
+  consts += [name]
+  mid_js += [r'''%s.prototype = Object.create(%s.prototype);
 %s.prototype.constructor = %s;
@@ -81,4 +95,4 @@
 %s.__cache__ = {};
-Module['%s'] = %s;
-''' % (name, 'Object.create(%s.prototype)' % (implements[name][0] if implements.get(name) else 'WrapperObject'), name, name, name, name, name, name, name)]
+define('%s', %s);
+''' % (name, 'WrapperObjectList' if name[-4:] == 'List' else 'WrapperObject', name, name, name, name, name, name, name)]
 
@@ -90,2 +104,58 @@
 }
+WrapperObject.prototype = {
+    get isValid() {
+        return typeof this.ptr === 'number' && this.ptr;
+    },
+    get isList() {
+        return this.isValid && typeof this.size === 'function' && typeof this.get === 'function';
+    },
+    free: function() {
+        if (this.isValid) destroy(this);
+    },
+    toString: function() {
+        return "[" + (this.constructor.name || "unknown") + "]";
+    }
+};
+function WrapperObjectList() {
+}
+WrapperObjectList.prototype = Object.create(WrapperObject.prototype);
+WrapperObjectList.prototype.toArray = function() {
+    var i = 0;
+    var len = this.size();
+    var list = Array(len);
+    while (i < len) {
+        list[i] = this.get(i);
+        i++;
+    }
+    return list;
+};
+WrapperObjectList.prototype.forEach = function(cb, t) {
+    var i = 0;
+    var len = this.size();
+    while (i < len && cb.call(t, this.get(i), i, this) !== true) { i++ }
+    return this;
+};
+WrapperObjectList.prototype.map = function(cb, t) {
+    var i = 0;
+    var len = this.size();
+    var list = Array(len);
+    while (i < len) {
+        list[i] = cb.call(t, this.get(i), i, this);
+        i++;
+    }
+    return list;
+};
+WrapperObjectList.prototype.filter = function(cb, t) {
+    var i = 0;
+    var list = [];
+    var len = this.size();
+    while (i < len) {
+        var v = this.get(i);
+        if (cb.call(t, v, i, this)) {
+            list.push(v);
+        }
+        i++;
+    }
+    return list;
+};
 ''']
@@ -93,2 +163,3 @@
 emit_constructor('WrapperObject')
+emit_constructor('WrapperObjectList')
 
@@ -110,2 +181,16 @@
 
+function weakPointer(ptr, __class__) {
+  var ret = Object.create((__class__ || WrapperObject).prototype);
+  ret.ptr = ptr;
+  return ret;
+}
+Module['weakPointer'] = weakPointer;
+
+function unwrapPointer(obj) {
+  delete getCache(obj.__class__)[obj.ptr];
+  delete obj.ptr;
+  freeze(obj);
+}
+Module['unwrapPointer'] = unwrapPointer;
+
 function castObject(obj, __class__) {
@@ -115,3 +200,3 @@
 
-Module['NULL'] = wrapPointer(0);
+define('NULL', wrapPointer(0));
 
@@ -254,3 +339,3 @@
 def type_to_cdec(raw):
-  name = ret = type_to_c(raw.type.name, non_pointing=True)
+  name = ret = type_to_c(raw.type.name, non_pointing=False)
   if raw.getExtendedAttribute('Const'): ret = 'const ' + ret
@@ -445,5 +530,5 @@
     %sEM_ASM_%s({
-      var self = Module['getCache'](Module['%s'])[$0];
+      var self = getCache(%s)[$0];
       if (!self.hasOwnProperty('%s')) throw 'a JSImplementation must implement all functions, you forgot %s::%s.';
-      %sself['%s'](%s)%s;
+      %sself.%s(%s)%s;
     }, (int)this%s);
@@ -455,2 +540,3 @@
           func_name,
+          # ','.join([('wrapPointer($%d, %s)' % (i, raw[i-1].type.name)) if raw[i-1].type.name in interfaces else ('$%d' % i) for i in range(1, max_args + 1)]),
           ','.join(['$%d' % i for i in range(1, max_args + 1)]),
@@ -623,16 +709,15 @@
 deferred_js = []
+tocompile_c = []
 
 for name, enum in enums.iteritems():
-  mid_c += ['\n// ' + name + '\n']
-  deferred_js += ['\n', '// ' + name + '\n']
+  tocompile_c += ['\n', '// ' + name + '\n']
   for value in enum.values():
     function_id = "%s_%s" % (name, value.split('::')[-1])
-    mid_c += [r'''%s EMSCRIPTEN_KEEPALIVE emscripten_enum_%s() {
-  return %s;
-}
-''' % (name, function_id, value)]
     symbols = value.split('::')
+    while len(symbols) > 2:
+      symbols.pop(0);
+
     if len(symbols) == 1:
       identifier = symbols[0]
-      deferred_js += ["Module['%s'] = _emscripten_enum_%s();\n" % (identifier, function_id)]
+      tocompile_c += ["printf(\"Module.%s = %%d;\\n\", %s);\n" % (identifier, value)]
     elif len(symbols) == 2:
@@ -641,7 +726,7 @@
         # namespace is a class
-        deferred_js += ["Module['%s']['%s'] = _emscripten_enum_%s();\n" % \
-                  (namespace, identifier, function_id)]
+        tocompile_c += ["printf(\"%s.%s = %%d;\\n\", %s);\n" % \
+                  (namespace, identifier, value)]
       else:
         # namespace is a namespace, so the enums get collapsed into the top level namespace.
-        deferred_js += ["Module['%s'] = _emscripten_enum_%s();\n" % (identifier, function_id)]
+        tocompile_c += ["printf(\"Module.%s = %%d;\\n\", %s);\n" % (identifier, value)]
     else:
@@ -649,11 +734,42 @@
 
+tocompile_c = '''
+#include <megaapi.h>
+#include <stdio.h>
+
+int main() {
+    %s
+    return 0;
+}
+''' % '\n    '.join(tocompile_c)
+
+temp = tempfile.mkstemp('.cpp');
+
+c = open(temp[1], 'w+')
+c.write(tocompile_c)
+c.close()
+
+process = Popen(["g++", temp[1], "-o", temp[1] + ".exe", "-Iinclude"], stdout=PIPE)
+(output, err) = process.communicate()
+exit_code = process.wait()
+
+if (exit_code):
+    sys.exit(1)
+
+process = Popen([temp[1] + ".exe"], stdout=PIPE)
+(output, err) = process.communicate()
+exit_code = process.wait()
+
+if (exit_code):
+    sys.exit(1)
+
+deferred_js += [output]
+
+consts = set(consts)
+for x in consts:
+    deferred_js += ["freeze(%s);" % x]
+
 mid_c += ['\n}\n\n']
 mid_js += ['''
-(function() {
-  function setupEnums() {
-    %s
-  }
-  if (Module['calledRun']) setupEnums();
-  else addOnPreMain(setupEnums);
-})();
+// Setup enums
+%s
 ''' % '\n    '.join(deferred_js)]
